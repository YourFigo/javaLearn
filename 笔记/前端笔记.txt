HTML标签：表单标签
* 表单：
* 概念：用于采集用户输入的数据的。用于和服务器进行交互。
* form：用于定义表单的。可以定义一个范围，范围代表采集用户数据的范围
	* 属性：
		* action：指定提交数据的URL
		* method:指定提交方式
			* 分类：一共7种，2种比较常用
			   * get：
					1. 请求参数会在地址栏中显示。会封装到请求行中(HTTP协议后讲解)。
					2. 请求参数大小是有限制的。
					3. 不太安全。
			   * post：
					2. 请求参数不会再地址栏中显示。会封装在请求体中(HTTP协议后讲解)
					2. 请求参数的大小没有限制。
					3. 较为安全。

	* 表单项中的数据要想被提交：必须指定其name属性
* 表单项标签：
	* input：可以通过type属性值，改变元素展示的样式
		* type属性：
			* text：文本输入框，默认值
				* placeholder：指定输入框的提示信息，当输入框的内容发生变化，会自动清空提示信息	
			* password：密码输入框
			* radio:单选框
				* 注意：
					1. 要想让多个单选框实现单选的效果，则多个单选框的name属性值必须一样。
					2. 一般会给每一个单选框提供value属性，指定其被选中后提交的值
					3. checked属性，可以指定默认值
			* checkbox：复选框
				* 注意：
					1. 一般会给每一个单选框提供value属性，指定其被选中后提交的值
					2. checked属性，可以指定默认值

			* file：文件选择框
			* hidden：隐藏域，用于提交一些信息。
			* 按钮：
				* submit：提交按钮。可以提交表单
				* button：普通按钮
				* image：图片提交按钮
					* src属性指定图片的路径	

	   * label：指定输入项的文字描述信息
		   * 注意：
			   * label的for属性一般会和 input 的 id属性值 对应。如果对应了，则点击label区域，会让input输入框获取焦点。
	* select: 下拉列表
		* 子元素：option，指定列表项
		
	* textarea：文本域
		* cols：指定列数，每一行有多少个字符
		* rows：默认多少行。

CSS:
选择器：筛选具有相似特征的元素
1. 基础选择器
	1. id选择器：选择具体的id属性值的元素.建议在一个html页面中id值唯一
		* 语法：#id属性值{}
	2. 元素选择器：选择具有相同标签名称的元素
		* 语法： 标签名称{}
		* 注意：id选择器优先级高于元素选择器
	3. 类选择器：选择具有相同的class属性值的元素。
		* 语法：.class属性值{}
		* 注意：类选择器选择器优先级高于元素选择器
2. 扩展选择器：
	1. 选择所有元素：
		* 语法： *{}
	2. 并集选择器：
		* 选择器1,选择器2{}
	
	3. 子选择器：筛选选择器1元素下的选择器2元素
		* 语法：  选择器1 选择器2{}
	4. 父选择器：筛选选择器2的父元素选择器1
		* 语法：  选择器1 > 选择器2{}

	5. 属性选择器：选择元素名称，属性名=属性值的元素
		* 语法：  元素名称[属性名="属性值"]{}

	6. 伪类选择器：选择一些元素具有的状态
		* 语法： 元素:状态{}
		* 如： <a>
			* 状态：
				* link：初始化的状态
				* visited：被访问过的状态
				* active：正在访问状态
				* hover：鼠标悬浮状态
属性
1. 字体、文本
	* font-size：字体大小
	* color：文本颜色
	* text-align：对其方式
	* line-height：行高 
2. 背景
	* background：
3. 边框
	* border：设置边框，符合属性
4. 尺寸
	* width：宽度
	* height：高度
5. 盒子模型：控制布局
	* margin：外边距
	* padding：内边距
		* 默认情况下内边距会影响整个盒子的大小
		* box-sizing: border-box;  设置盒子的属性，让width和height就是最终盒子的大小

	* float：浮动
		* left
		* right

Bootstrap，一个前端开发的框架，来自 Twitter，是目前很受欢迎的前端框架。
* 同一套页面可以兼容不同分辨率的设备。
* 实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子
* 步骤：
	1. 定义容器。相当于之前的table、
		* 容器分类：
			1. container：两边留白
			2. container-fluid：每一种设备都是100%宽度
	2. 定义行。相当于之前的tr   样式：row
	3. 定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目
		* 设备代号：
			1. xs：超小屏幕 手机 (<768px)：col-xs-12
			2. sm：小屏幕 平板 (≥768px)
			3. md：中等屏幕 桌面显示器 (≥992px)
			4. lg：大屏幕 大桌面显示器 (≥1200px)

	* 注意：
		1. 一行中如果格子数目超过12，则超出部分自动换行。
		2. 栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。
		3. 如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。


javascript
原始数据类型(基本数据类型)：
	1. number：数字。 整数/小数/NaN(not a number 一个不是数字的数字类型)
	2. string：字符串。 字符串  "abc" "a" 'abc'
	3. boolean: true和false
	4. null：一个对象为空的占位符
	5. undefined：未定义。如果一个变量没有给初始化值，则会被默认赋值为undefined
注释
	1. 单行注释：//注释内容
	2. 多行注释：/*注释内容*/
typeof运算符：获取变量的类型。
	* 注：null运算后得到的是object
其他类型转number
	* string转number：按照字面值转换。如果字面值不是数字，则转为NaN（不是数字的数字）
	* boolean转number：true转为1，false转为0
==和===
1. 类型相同：直接比较
  * 字符串：按照字典顺序比较。按位逐一比较，直到得出大小为止。
2. 类型不同：先进行类型转换，再比较
  * ===：全等于。在比较之前，先判断类型，如果类型不一样，则直接返回false
Function对象：
	function 方法名称(形式参数列表){
								方法体
							}
	 
	var 方法名 = function(形式参数列表){
		方法体
	}
	属性 length :代表形参的个数
	在方法声明中有一个隐藏的内置对象（数组）arguments,封装所有的实际参数
RegExp：正则表达式对象
1. 正则表达式：定义字符串的组成规则。
	1. 单个字符:[]
		如： [a] [ab] [a-zA-Z0-9_]
		* 特殊符号代表特殊含义的单个字符:
			\d:单个数字字符 [0-9]
			\w:单个单词字符[a-zA-Z0-9_]
	2. 量词符号：
		?：表示出现0次或1次
		*：表示出现0次或多次
		+：出现1次或多次
		{m,n}:表示 m<= 数量 <= n
			* m如果缺省： {,n}:最多n次
			* n如果缺省：{m,} 最少m次
	3. 开始结束符号
		* ^:开始
		* $:结束
2. 正则对象：
	1. 创建
		1. var reg = new RegExp("正则表达式");
		2. var reg = /正则表达式/;
	2. 方法	
		1. test(参数):验证指定的字符串是否符合正则定义的规范
		
Global对象
1. 特点：全局对象，这个Global中封装的方法不需要对象就可以直接调用。  方法名();
2. 方法：
	encodeURI():url编码
	decodeURI():url解码

	encodeURIComponent():url编码,编码的字符更多
	decodeURIComponent():url解码

	parseInt():将字符串转为数字
		* 逐一判断每一个字符是否是数字，直到不是数字为止，将前边数字部分转为number
	isNaN():判断一个值是否是NaN
		* NaN六亲不认，连自己都不认。NaN参与的==比较全部问false
	eval():将 JavaScript 字符串，并把它作为脚本代码来执行。
BOM: Browser Object Model 浏览器对象模型
Window：窗口对象
1. 创建
2. 方法
	 1. 与弹出框有关的方法：
		alert()	显示带有一段消息和一个确认按钮的警告框。
		confirm()	显示带有一段消息以及确认按钮和取消按钮的对话框。
			* 如果用户点击确定按钮，则方法返回true
			* 如果用户点击取消按钮，则方法返回false
		prompt()	显示可提示用户输入的对话框。
			* 返回值：获取用户输入的值
	 2. 与打开关闭有关的方法：
		close()	关闭浏览器窗口。
			* 谁调用我 ，我关谁
		open()	打开一个新的浏览器窗口
			* 返回新的Window对象
	 3. 与定时器有关的方式
		setTimeout()	在指定的毫秒数后调用函数或计算表达式。
			* 参数：
				1. js代码或者方法对象
				2. 毫秒值
			* 返回值：唯一标识，用于取消定时器
		clearTimeout()	取消由 setTimeout() 方法设置的 timeout。
		setInterval()	按照指定的周期（以毫秒计）来调用函数或计算表达式。
		clearInterval()	取消由 setInterval() 设置的 timeout。
3. 属性：
	1. 获取其他BOM对象：
		history
		location
		Navigator
		Screen:
	2. 获取DOM对象
		document
4. 特点
	* Window对象不需要创建可以直接使用 window使用。 window.方法名();
	* window引用可以省略。  方法名();
DOM：Document Object Model 文档对象模型
Document：文档对象
1. 创建(获取)：在html dom模型中可以使用window对象来获取
	1. window.document
	2. document
2. 方法：
	1. 获取Element对象：
		1. getElementById()	： 根据id属性值获取元素对象。id属性值一般唯一
		2. getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组
		3. getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组
		4. getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组
	2. 创建其他DOM对象：
		createAttribute(name)
Element：元素对象
1. 获取/创建：通过document来获取和创建
2. 方法：
	1. removeAttribute()：删除属性
	2. setAttribute()：设置属性
Node：节点对象，其他5个的父对象
* 特点：所有dom对象都可以被认为是一个节点
* 方法：
	* CRUD dom树：
		* appendChild()：向节点的子节点列表的结尾添加新的子节点。
		* removeChild()	：删除（并返回）当前节点的指定子节点。
		* replaceChild()：用新节点替换一个子节点。
* 属性：
	* parentNode 返回节点的父节点。
常见的事件：
1. 点击事件：
	1. onclick：单击事件
	2. ondblclick：双击事件
2. 焦点事件
	1. onblur：失去焦点
	2. onfocus:元素获得焦点。

3. 加载事件：
	1. onload：一张页面或一幅图像完成加载。

4. 鼠标事件：
	1. onmousedown	鼠标按钮被按下。
	2. onmouseup	鼠标按键被松开。
	3. onmousemove	鼠标被移动。
	4. onmouseover	鼠标移到某元素之上。
	5. onmouseout	鼠标从某元素移开。
	
	
5. 键盘事件：
	1. onkeydown	某个键盘按键被按下。	
	2. onkeyup		某个键盘按键被松开。
	3. onkeypress	某个键盘按键被按下并松开。

6. 选择和改变
	1. onchange	域的内容被改变。
	2. onselect	文本被选中。

7. 表单事件：
	1. onsubmit	确认按钮被点击。
	2. onreset	重置按钮被点击。

JQuery:
1.x：兼容ie678,使用最为广泛的，官方只做BUG维护，最终版本：1.12.4 (2016年5月20日)
2.x：不兼容ie678，很少有人使用
3.x：不兼容ie678，只支持最新的浏览器。除非特殊要求，一般不会使用3.x版本的
JQuery对象和js对象方法不通用的，两者相互转换
	* jq -- > js : jq对象[索引] 或者 jq对象.get(索引)
	* js -- > jq : $(js对象)
事件绑定
	//1.获取b1按钮
	$("#b1").click(function(){
		alert("abc");
	});
入口函数
	$(function () {
		alert("abc");
	});
	window.onload  和 $(function) 区别
		 * window.onload 只能定义一次,如果定义多次，后边的会将前边的覆盖掉
		 * $(function)可以定义多次的。
选择器：
1. 基本选择器
	1. 标签选择器（元素选择器）
		* 语法： $("html标签名") 获得所有匹配标签名称的元素
	2. id选择器 
		* 语法： $("#id的属性值") 获得与指定id属性值匹配的元素
	3. 类选择器
		* 语法： $(".class的属性值") 获得与指定的class属性值匹配的元素
	4. 并集选择器：
		* 语法： $("选择器1,选择器2....") 获取多个选择器选中的所有元素
2. 层级选择器
	1. 后代选择器
		* 语法： $("A B ") 选择A元素内部的所有B元素		
	2. 子选择器
		* 语法： $("A > B") 选择A元素内部的所有B子元素
3. 属性选择器
	1. 属性名称选择器 
		* 语法： $("A[属性名]") 包含指定属性的选择器
	2. 属性选择器
		* 语法： $("A[属性名='值']") 包含指定属性等于指定值的选择器
	3. 复合属性选择器
		* 语法： $("A[属性名='值'][]...") 包含多个属性条件的选择器
4. 过滤选择器
	1. 首元素选择器 
		* 语法： :first 获得选择的元素中的第一个元素
	2. 尾元素选择器 
		* 语法： :last 获得选择的元素中的最后一个元素
	3. 非元素选择器
		* 语法： :not(selector) 不包括指定内容的元素
	4. 偶数选择器
		* 语法： :even 偶数，从 0 开始计数
	5. 奇数选择器
		* 语法： :odd 奇数，从 0 开始计数
	6. 等于索引选择器
		* 语法： :eq(index) 指定索引元素
	7. 大于索引选择器 
		* 语法： :gt(index) 大于指定索引元素
	8. 小于索引选择器 
		* 语法： :lt(index) 小于指定索引元素
	9. 标题选择器
		* 语法： :header 获得标题（h1~h6）元素，固定写法
表单过滤选择器
1. 可用元素选择器 
	* 语法： :enabled 获得可用元素
2. 不可用元素选择器 
	* 语法： :disabled 获得不可用元素
3. 选中选择器 
	* 语法： :checked 获得单选/复选框选中的元素
4. 选中选择器 
	* 语法： :selected 获得下拉框选中的元素
DOM操作
内容操作：
	1. html(): 获取/设置元素的标签体内容   <a><font>内容</font></a>  --> <font>内容</font>
	2. text(): 获取/设置元素的标签体纯文本内容   <a><font>内容</font></a> --> 内容
	3. val()： 获取/设置元素的value属性值
属性操作：
	1. attr(): 获取/设置元素的属性
	2. removeAttr():删除属性
	3. prop():获取/设置元素的属性
	4. removeProp():删除属性
	* attr和prop区别？
		1. 如果操作的是元素的固有属性，则建议使用prop
		2. 如果操作的是元素自定义的属性，则建议使用attr
class属性：
1. addClass():添加class属性值
2. removeClass():删除class属性值
3. toggleClass():切换class属性
	* toggleClass("one"): 
		* 判断如果元素对象上存在class="one"，则将属性值one删除掉。  如果元素对象上不存在class="one"，则添加
4. css():
CRUD操作：
1. append():父元素将子元素追加到末尾
	* 对象1.append(对象2): 将对象2添加到对象1元素内部，并且在末尾
2. prepend():父元素将子元素追加到开头
	* 对象1.prepend(对象2):将对象2添加到对象1元素内部，并且在开头
3. appendTo():
	* 对象1.appendTo(对象2):将对象1添加到对象2内部，并且在末尾
4. prependTo()：
	* 对象1.prependTo(对象2):将对象1添加到对象2内部，并且在开头
5. after():添加元素到元素后边
	* 对象1.after(对象2)： 将对象2添加到对象1后边。对象1和对象2是兄弟关系
6. before():添加元素到元素前边
	* 对象1.before(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系
7. insertAfter()
	* 对象1.insertAfter(对象2)：将对象2添加到对象1后边。对象1和对象2是兄弟关系
8. insertBefore()
	* 对象1.insertBefore(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系
9. remove():移除元素
	* 对象.remove():将对象删除掉
10. empty():清空元素的所有后代元素。
	* 对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点
jq遍历：
1. jq对象.each(callback)
	1. 语法：
		jquery对象.each(function(index,element){});
			* index:就是元素在集合中的索引
			* element：就是集合中的每一个元素对象

			* this：集合中的每一个元素对象
	2. 回调函数返回值：
		* true:如果当前function返回为false，则结束循环(break)。
		* false:如果当前function返回为true，则结束本次循环，继续下次循环(continue)
2. $.each(object, [callback])




Ajax：ASynchronous JavaScript And XML	异步的JavaScript 和 XML
Ajax 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。
通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。
同步：客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。
异步：客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。

Ajax异步请求JQuery的三种实现方式：
1、
$.ajax({
	url:"ajaxServlet1111" , // 请求路径
	type:"POST" , //请求方式
	//data: "username=jack&age=23",//请求参数
	data:{"username":"jack","age":23},
	success:function (data) {
		alert(data);
	},//响应成功后的回调函数
	error:function () {
		alert("出错啦...")
	},//表示如果请求响应出现错误，会执行的回调函数

	dataType:"text"//设置接受到的响应数据的格式
});
2、
$.get()：发送get请求
* 语法：$.get(url, [data], [callback], [type])
	* 参数：
		* url：请求路径
		* data：请求参数
		* callback：回调函数
		* type：响应结果的类型
3、
$.post()：发送post请求
* 语法：$.post(url, [data], [callback], [type])
	* 参数：
		* url：请求路径
		* data：请求参数
		* callback：回调函数
		* type：响应结果的类型
		
json：
var person = {"name": "张三", age: 23, 'gender': true};		
var ps = [{"name": "张三", "age": 23, "gender": true},
	{"name": "李四", "age": 24, "gender": true},
	{"name": "王五", "age": 25, "gender": false}];
获取json数据：
1. json对象.键名
2. json对象["键名"]
3. 数组对象[索引]
//获取ps中的所有值
for (var i = 0; i < ps.length; i++) {
	var p = ps[i];
	for(var key in p){
		alert(key+":"+p[key]);
	}
}

